--- The second reader-writer model where reader and writer has equal priority.

fmod LABEL is
    sort Label .
    ops rs ws cs wrws : -> Label [ctor] .
endfm

mod READER-WRITER-2 is
    including QUEUE .
    including NAT .
    pr LABEL .

    sorts OCom Config .
    subsort OCom < Config .
    op __ : Config Config -> Config [ctor assoc comm] .
    op wp[_]:_ : Pid Label -> OCom [ctor] .
    op rp[_]:_ : Pid Label -> OCom [ctor] .
    op waitQueue:_ : Queue -> OCom [ctor] .
    op waitRwQueue:_ : Queue -> OCom [ctor] .
    op readers:_ : Nat -> OCom [ctor] .
    op ic : -> Config .
    eq ic = (wp[p(1)]: rs) (wp[p(2)]: rs)
            (rp[p(4)]: rs) (rp[p(5)]: rs)
            (readers: 0) (waitQueue: empty) (waitRwQueue: empty) .

    var i : NzNat .
    var count : Nat .
    vars QRW QW  : Queue .

    rl [reader-wait] : (rp[p(i)]: rs) (waitQueue: QW) => (rp[p(i)]: ws) (waitQueue: enq(QW, p(i))) .
    
    rl [writer-wait] : (wp[p(i)]: rs) (waitQueue: QW) => (wp[p(i)]: ws) (waitQueue: enq(QW, p(i))) .

    crl [reader-wait-rw] : (rp[p(i)]: ws) (readers: count) (waitQueue: (p(i) | QW)) (waitRwQueue: QRW) => 
                    (rp[p(i)]: wrws) (readers: count) (waitQueue: (p(i) | QW)) (waitRwQueue: enq(QRW, p(i))) 
                    if count == 0 .

    crl [reader-try-rw-1] : (rp[p(i)]: ws) (readers: count) (waitQueue: (p(i) | QW)) => 
                        (rp[p(i)]: cs) (readers: (count + 1)) (waitQueue: deq((p(i) | QW))) 
                        if count > 0 .

    rl [reader-try-rw-2] : (rp[p(i)]: wrws) (readers: count) (waitQueue: (p(i) | QW)) (waitRwQueue: (p(i) | QRW)) => 
                    (rp[p(i)]: cs) (readers: (count + 1)) (waitQueue: deq((p(i) | QW))) (waitRwQueue: (p(i) | QRW)) .

    rl [writer-wait-rw] : (wp[p(i)]: ws) (waitQueue: (p(i) | QW)) (waitRwQueue: QRW) => 
                        (wp[p(i)]: wrws) (waitQueue: (p(i) | QW)) (waitRwQueue: enq(QRW, p(i))) .
                    
    rl [writer-try-rw] : (wp[p(i)]: wrws) (waitQueue: (p(i) | QW)) (waitRwQueue: (p(i) | QRW)) => 
                        (wp[p(i)]: cs) (waitQueue: (p(i) | QW)) (waitRwQueue: (p(i) | QRW)) .

    crl [reader-exit-1] : (rp[p(i)]: cs) (readers: count) => 
                        (rp[p(i)]: rs) (readers: sd(count, 1)) 
                        if count > 1 .

    crl [reader-exit-2] : (rp[p(i)]: cs) (readers: count) (waitRwQueue: QRW) => 
                        (rp[p(i)]: rs) (readers: sd(count, 1)) (waitRwQueue: deq(QRW))
                        if count == 1 .

    rl [writer-exit] : (wp[p(i)]: cs) (waitQueue: QW) (waitRwQueue: QRW) => 
                    (wp[p(i)]: rs) (waitQueue: deq(QW)) (waitRwQueue: deq(QRW)).
endm